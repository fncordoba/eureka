{"ast":null,"code":"var _jsxFileName = \"/home/facundo/projects/eureka/front/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Note from './components/Note';\nimport noteService from './services/notes';\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  useEffect(() => {\n    noteService.getAll().then(initialNotes => {\n      setNotes(initialNotes);\n    });\n  }, []);\n\n  const addNote = event => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1\n    };\n    noteService.create(noteObject).then(returnedNote => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote('');\n    });\n  };\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id);\n    const changedNote = { ...note,\n      important: !note.important\n    };\n    noteService.update(id, changedNote).then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote));\n    }).catch(error => {\n      setErrorMessage(`Note '${note.content}' was already removed from server`);\n      setTimeout(() => {\n        setErrorMessage(null);\n      }, 5000);\n    });\n  };\n\n  const handleNoteChange = event => {\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, \"Address\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, notesToShow.map((note, i) => /*#__PURE__*/React.createElement(Note, {\n    key: i,\n    note: note,\n    toggleImportance: () => toggleImportanceOf(note.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: addNote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: newNote,\n    onChange: handleNoteChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, \"save\")));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/facundo/projects/eureka/front/src/App.js"],"names":["React","useState","useEffect","Note","noteService","App","notes","setNotes","newNote","setNewNote","getAll","then","initialNotes","addNote","event","preventDefault","noteObject","content","date","Date","toISOString","important","Math","random","id","length","create","returnedNote","concat","toggleImportanceOf","note","find","n","changedNote","update","map","catch","error","setErrorMessage","setTimeout","handleNoteChange","target","value","notesToShow","showAll","filter","i"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\nconst App = () => {\n  const [notes, setNotes] = useState([]) \n  const [newNote, setNewNote] = useState('')\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    }\n  \n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n  \n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)   \n      })\n  }\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  return (\n    <div>\n      <h1>Address</h1>    \n      <ul>\n        {notesToShow.map((note, i) => \n          <Note\n            key={i}\n            note={note} \n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>   \n    </div>\n  )\n}\n\nexport default App "]},"metadata":{},"sourceType":"module"}